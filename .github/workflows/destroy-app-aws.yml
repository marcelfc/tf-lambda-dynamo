name: Destroy application to AWS

on:
  workflow_dispatch:

jobs:
  terraform:
    name: "Destroy application to AWS using Terraform"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./app

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      TF_BACKEND_STATE_BUCKET: ${{ vars.TF_BACKEND_STATE_BUCKET }}
      TF_BACKEND_STATE_KEY: ${{ vars.TF_BACKEND_STATE_KEY }}
      TF_BACKEND_LOCKS_DYNAMODB_TABLE: ${{ vars.TF_BACKEND_LOCKS_DYNAMODB_TABLE }}
      REPORT_BUCKET_NAME: ${{ vars.REPORT_BUCKET_NAME }}
      REPORT_BUCKET_EXISTS: ${{ vars.REPORT_BUCKET_EXISTS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Init Terraform Configuration
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BACKEND_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_BACKEND_STATE_KEY }}" \
            -backend-config="dynamodb_table=${{ env.TF_BACKEND_LOCKS_DYNAMODB_TABLE }}" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Destroy existing Terraform Configuration
        id: destroy
        run: |
          terraform destroy \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="report_bucket_name=${{ env.REPORT_BUCKET_NAME }}" \
            -var="report_bucket_exists=${{ env.REPORT_BUCKET_EXISTS }}" \
            -auto-approve \
            -input=false
